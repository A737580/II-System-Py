from models.facts import Facts
from models.rules import Rules
from typing import Set, List


class LogicalConclusionService:
    @staticmethod
    def straight_move(general_facts: Facts, general_rules: Rules) -> Set[str]:
        primary_facts = general_facts.get_all()
        rules_copy = general_rules.get_copy()
        is_complete_rule = True

        while is_complete_rule:
            is_complete_rule = False
            iteration_copy = rules_copy.get_all()
            
            for possible_fact in iteration_copy.keys():
                for rule in iteration_copy[possible_fact]:
                    is_feasible_rule = True
                    
                    for antecedent in rule:
                        if antecedent not in primary_facts:
                            is_feasible_rule = False
                            break
                    
                    if is_feasible_rule:
                        primary_facts.add(possible_fact)
                        rules_copy.delete_by_fact(possible_fact, rule)
                        is_complete_rule = True
        
        return set(primary_facts)

    @staticmethod
    def reverse_move(general_facts: Facts, general_rules: Rules, target: str) -> List[str]:
        """–û–±—Ä–∞—Ç–Ω—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø–æ–∫–∞ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã."""
        steps = []
        proven_facts = general_facts.get_all().copy()
        steps.append(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Ñ–∞–∫—Ç–∞: {target}")
        steps.append(f"–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {', '.join(sorted(proven_facts))}")
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞
        new_fact_derived = True
        iteration = 1
        
        while new_fact_derived:
            new_fact_derived = False
            steps.append(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}:")
            iteration += 1
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            # –≠—Ç–æ –≤—Å–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤–∏–ª
            all_potential_goals = set()
            rules_dict = general_rules.get_all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
            for consequent in rules_dict.keys():
                if consequent not in proven_facts:
                    all_potential_goals.add(consequent)
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–µ—Ü–µ–¥–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
            for antecedents_set in rules_dict.values():
                for antecedents in antecedents_set:
                    for antecedent in antecedents:
                        if antecedent not in proven_facts:
                            all_potential_goals.add(antecedent)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –¥–æ–∫–∞–∑–∞–Ω–∞
            if target not in proven_facts:
                all_potential_goals.add(target)
            
            goals_to_check = list(all_potential_goals)
            steps.append(f"–¶–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {', '.join(sorted(goals_to_check))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ü–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            for current_goal in goals_to_check:
                if current_goal in proven_facts:
                    continue
                    
                steps.append(f"  üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º: {current_goal}")
                
                if current_goal in rules_dict:
                    for i, antecedents in enumerate(rules_dict[current_goal], 1):
                        steps.append(f"    –ü—Ä–∞–≤–∏–ª–æ {i}: {antecedents} ‚Üí {current_goal}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –∞–Ω—Ç–µ—Ü–µ–¥–µ–Ω—Ç—ã –¥–æ–∫–∞–∑–∞–Ω—ã
                        all_proven = True
                        for antecedent in antecedents:
                            if antecedent not in proven_facts:
                                all_proven = False
                                steps.append(f"      ‚ùå –ù–µ –¥–æ–∫–∞–∑–∞–Ω: {antecedent}")
                                break
                        
                        if all_proven:
                            proven_facts.add(current_goal)
                            new_fact_derived = True
                            steps.append(f"    ‚úÖ –ü—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ! –ù–æ–≤—ã–π —Ñ–∞–∫—Ç: {current_goal}")
                            break
                        else:
                            steps.append(f"    ‚ùå –ü—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ")
                else:
                    steps.append(f"    ‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ {current_goal}")
            
            steps.append(f"–§–∞–∫—Ç—ã –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏: {', '.join(sorted(proven_facts))}")
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            if iteration > 100:
                steps.append("‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
                break
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        steps.append("\n" + "="*50)
        if target in proven_facts:
            steps.append(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –§–∞–∫—Ç '{target}' –í–´–í–û–î–ò–ú")
        else:
            steps.append(f"üí• –¶–ï–õ–¨ –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê! –§–∞–∫—Ç '{target}' –ù–ï –í–´–í–û–î–ò–ú")
        
        steps.append(f"üìà –í—Å–µ–≥–æ –¥–æ–∫–∞–∑–∞–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {len(proven_facts)}")
        steps.append(f"üìã –î–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {', '.join(sorted(proven_facts))}")
        
        return steps

